#version 430

layout(local_size_x = 1) in;
layout(std430, binding=0) buffer particlePositions {
    vec4 pos[];
};

layout(std430, binding=1) buffer particleVelocities {
    vec4 vel[];
};

uniform float masses[10];
uniform vec3 massPositions[10];
uniform int nMasses;
uniform float particleMass;
uniform float gravitationalConstant;
uniform float timeStep;

void main() {
    // Update your position and velocity for each particle, according to the gravitational forces 
    // from the masses.
    // First, find the total force acting on each particle.
    // For each mass add on a force of G m_1 m_2 r^-2 in the direction towards that mass location.
    // Now you have the total force, find acceleration and  update velocity and then position using 
    // the semi-implicit Euler update
    // Write these new values back to the buffer.
    // Remember to use gl_GlobalInvocationID to find which particle to modify!
    vec3 force;
    vec4 _pos = pos[ gl_GlobalInvocationID.x];
    for (int i = 0; i < nMasses; ++i)
    {
        vec3 distance = massPositions[i] - _pos.xyz;
        vec3 displacement = normalize( distance);
        float distScale = length(distance);
        float gravity = ((gravitationalConstant * masses[i]) * particleMass) / (distScale * distScale);

        force += (gravity * displacement);
    }
    
    vec3 velocity = vel[gl_GlobalInvocationID.x].xyz;
    vec3 acceleration = force / particleMass;
    velocity += (acceleration * timeStep);

    vel[gl_GlobalInvocationID.x].xyz = velocity;
    pos[gl_GlobalInvocationID.x].xyz += velocity * timeStep;
}

